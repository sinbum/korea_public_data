services:
  # MongoDB Database (Development)
  mongodb:
    image: mongo:6.0
    container_name: korea_mongodb_dev
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-admin123}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-korea_public_api}
    ports:
      - "27017:27017"
    volumes:
      - ./be/volumes/mongodb/data:/data/db
      - ./be/volumes/mongodb/configdb:/data/configdb
      - ./be/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - korea_dev_network

  # Redis Cache (Development)
  redis:
    image: redis:7-alpine
    container_name: korea_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./be/volumes/redis/data:/data
    networks:
      - korea_dev_network

  # Backend API Server (Development with hot reload)
  backend:
    build:
      context: ./be
      dockerfile: Dockerfile
      target: development
    container_name: korea_backend_dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - ./be/.env
    environment:
      - MONGODB_URL=mongodb://api_user:api_password@mongodb:27017/korea_public_api
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_NAME=${DATABASE_NAME:-korea_public_api}
      - DEBUG=True
      - LOG_LEVEL=DEBUG
      - API_BASE_URL=http://localhost:8000
    volumes:
      - ./be/app:/app/app:ro  # Mount source code for hot reload
      - ./be/logs:/app/logs
      - ./be/volumes/uploads:/app/uploads
      - ./be/volumes/tmp:/app/tmp
    depends_on:
      - mongodb
      - redis
    networks:
      - korea_dev_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js Application (Development with hot reload)
  frontend:
    build:
      context: ./fe
      dockerfile: Dockerfile.dev
    container_name: korea_frontend_dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8000
      - NEXT_PUBLIC_API_PROXY=0
      - NEXT_PUBLIC_AUTH_MODE=cookie
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
    volumes:
      - ./fe:/app:cached  # Mount source code for hot reload
      - korea_frontend_node_modules:/app/node_modules  # Persist node_modules in named volume
      - korea_frontend_next_cache:/app/.next  # Persist .next build cache in named volume
    depends_on:
      - backend
    networks:
      - korea_dev_network
    command: npm run dev

  # Celery Worker (Development)
  celery_worker:
    build:
      context: ./be
      dockerfile: Dockerfile
      target: development
    container_name: korea_celery_worker_dev
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=debug
    env_file:
      - ./be/.env
    environment:
      - MONGODB_URL=mongodb://api_user:api_password@mongodb:27017/korea_public_api
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_NAME=${DATABASE_NAME:-korea_public_api}
      - DEBUG=True
      - LOG_LEVEL=DEBUG
    volumes:
      - ./be/app:/app/app:ro
      - ./be/logs:/app/logs
      - ./be/volumes/tmp:/app/tmp
    depends_on:
      - mongodb
      - redis
    networks:
      - korea_dev_network

  # Celery Beat Scheduler (Development)
  celery_beat:
    build:
      context: ./be
      dockerfile: Dockerfile
      target: development
    container_name: korea_celery_beat_dev
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=debug
    env_file:
      - ./be/.env
    environment:
      - MONGODB_URL=mongodb://api_user:api_password@mongodb:27017/korea_public_api
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_NAME=${DATABASE_NAME:-korea_public_api}
      - DEBUG=True
      - LOG_LEVEL=DEBUG
    volumes:
      - ./be/app:/app/app:ro
      - ./be/logs:/app/logs
      - ./be/volumes/tmp:/app/tmp
    depends_on:
      - mongodb
      - redis
    networks:
      - korea_dev_network

networks:
  korea_dev_network:
    driver: bridge
    name: korea_dev_network

volumes:
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  korea_frontend_node_modules:
    driver: local
  korea_frontend_next_cache:
    driver: local