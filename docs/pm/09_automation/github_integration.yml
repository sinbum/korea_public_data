# GitHub Actions - PM 문서 자동화 워크플로우
# 이 파일을 .github/workflows/ 디렉토리에 복사하여 사용

name: 🤖 PM 문서 자동 업데이트

on:
  # 평일 오전 9시에 자동 실행
  schedule:
    - cron: '0 9 * * 1-5'
  
  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      completion_percentage:
        description: '프로젝트 완성도 (%)'
        required: false
        default: ''
      daily_only:
        description: '일일 스탠드업만 생성'
        type: boolean
        required: false
        default: false

jobs:
  update-pm-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: 📦 의존성 설치
        run: |
          python -m pip install --upgrade pip
          # 필요한 패키지가 있다면 여기에 추가
          
      - name: 🔍 스크립트 존재 확인
        run: |
          if [ ! -f "docs/pm/09_automation/update_scripts.py" ]; then
            echo "❌ PM 자동화 스크립트를 찾을 수 없습니다."
            exit 1
          fi
          echo "✅ PM 자동화 스크립트 확인됨"
      
      - name: 🤖 PM 문서 업데이트 실행
        run: |
          cd ${{ github.workspace }}
          
          # 입력 파라미터에 따라 다른 명령 실행
          if [ "${{ github.event.inputs.daily_only }}" == "true" ]; then
            echo "📅 일일 스탠드업만 생성합니다..."
            python docs/pm/09_automation/update_scripts.py -d
          elif [ -n "${{ github.event.inputs.completion_percentage }}" ]; then
            echo "📊 완성도 ${{ github.event.inputs.completion_percentage }}%로 문서를 업데이트합니다..."
            python docs/pm/09_automation/update_scripts.py -c ${{ github.event.inputs.completion_percentage }}
          else
            echo "🔄 모든 PM 문서를 업데이트합니다..."
            python docs/pm/09_automation/update_scripts.py
          fi
      
      - name: 📋 변경사항 확인
        id: check_changes
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo "변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "변경사항이 감지되었습니다:"
            git status --short
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: 📝 변경사항 커밋
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "PM Automation Bot"
          
          # 변경된 파일들 추가
          git add docs/pm/
          
          # 커밋 메시지 생성
          CURRENT_DATE=$(date +"%Y-%m-%d")
          CURRENT_SPRINT=$(python -c "
          import datetime
          start_date = datetime.datetime(2024, 1, 15)
          current_date = datetime.datetime.now()
          days_diff = (current_date - start_date).days
          sprint_number = (days_diff // 14) + 1
          print(f'Sprint {sprint_number}')
          ")
          
          if [ "${{ github.event.inputs.daily_only }}" == "true" ]; then
            COMMIT_MSG="🤖 Auto-create daily standup for ${CURRENT_DATE}"
          else
            COMMIT_MSG="🤖 Auto-update PM documents for ${CURRENT_SPRINT} (${CURRENT_DATE})"
          fi
          
          git commit -m "${COMMIT_MSG}" -m "
          📋 자동 업데이트된 문서:
          - Task Assignment Matrix
          - Product Backlog Metrics  
          - System State Documentation
          - Daily Standup (if applicable)
          - Sprint Report (if applicable)
          
          🤖 Generated by PM Automation System
          " || echo "커밋할 변경사항이 없습니다."
      
      - name: 🚀 변경사항 푸시
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push origin ${{ github.ref_name }}
      
      - name: 📊 실행 결과 요약
        run: |
          echo "## 🤖 PM 문서 자동화 실행 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 날짜**: $(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 모드**: ${{ github.event.inputs.daily_only == 'true' && '일일 스탠드업만' || '전체 문서 업데이트' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "- **변경사항**: ✅ 있음" >> $GITHUB_STEP_SUMMARY
            echo "- **커밋 푸시**: ✅ 완료" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **변경사항**: ❌ 없음" >> $GITHUB_STEP_SUMMARY
            echo "- **커밋 푸시**: ⏭️ 스킵됨" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 업데이트된 문서 위치" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/pm/05_development/task_assignment_matrix.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/pm/02_requirements/product_backlog.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/pm/03_specifications/current_system_state.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/pm/06_meetings/daily_standups/daily_standup_$(date +%Y%m%d).md\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/pm/07_reports/sprint_reports/\`" >> $GITHUB_STEP_SUMMARY

  # 실패 시 알림 (선택사항)
  notify-on-failure:
    runs-on: ubuntu-latest
    needs: update-pm-docs
    if: failure()
    
    steps:
      - name: 🚨 실패 알림
        run: |
          echo "❌ PM 문서 자동화가 실패했습니다."
          echo "로그를 확인하여 문제를 해결해주세요."
          # 여기에 Slack, Discord 등의 알림 로직 추가 가능